#!/usr/bin/env python
'''
MVpipe Simple Job Queue (mvsjq)

You specify:
  - how many processes to run (CPUs)
  - how much memory to use
    (and defaults per job) 

The SJQ will open a socket to accept job requests. The protocol for these
requests is a simple text-based protocol. By default, this socket will be
located in $HOME/.mvsjq.sock. Jobs will run under the credentials of the 
running user. When there are no more jobs, SJQ will wait for $TIMEOUT
seconds (default: 60). If there are still no jobs, then it will shut itself
down.

Note: If you want a more complicated setup for more than one client user, you
can  specify an absolute path for the socket, and the SJQ will run the jobs
whatever account has started the daemon. You can also run the daemon as root
and it will run the jobs as the UID/GID of the submitting user. However, if
you *really* want to do this, please consider a different scheduler, such as
Open Grid Engine, PBS, or SLURM. SJQ was designed to make it easier to run
multi-task pipelines on a single server that didn't already have a job
scheduler installed. It should be used sparingly!

Scheduling priority
-------------------
Jobs are executed on a first-come, first-serve basis. If a job can not execute
due to CPU, memory, or job dependencies, then it will be skipped and SJQ will
attempt to run the next available job.


Configuration
-------------
You can set various default values in the $HOME/.mvpiperc file. The config
values that are relevant to SJQ are:

mvsjq.socket=path-to-file           default: $HOME/.mvsjq.sock
mvsjq.log=path-to-logfile           default: none
mvsjq.daemon=[TF]                   default: F
mvsjq.autoshutdown=[TF]             default: T
mvsjq.waittime=value-in-seconds     default: 60

mvsjq.cpus=max-cpus                 default: total CPUs in system
mvsjq.mem=max-mem (8M, 2G, etc...)  default: total memory of system
mvsjq.defaults.cpu=num              default: 1
mvsjq.defaults.mem=mem-per-job      default: 2G


Protocol
--------
To check the status of a job: 
  send: STATUS jobid\r\n
  recv: OK jobid [RQH]\r\n

To kill a job:
  send: KILL jobid\r\n
  recv: OK\r\n

To submit a job:
  send: SUBMIT\r\n
  send: OPTION-KEY VALUE
  send: SRC script-len\r\n
  send  <script>
  recv: OK jobid\r\n

  valid options:
    MEM PROC STDOUT STDIN ENV CWD NAME UID* GID*

    (* only used if the daemon was started as root - not recommended!)

To stop the daemon:
  send: SHUTDOWN\r\n
  recv: OK\r\n

To list queued jobs:
  send: LIST\r\n
  recv: JOBID\tJOBNAME\t[RQH]\tDEPENDS\r\n
        (one line for each job)
  recv: OK

'''

import sys

def start(**args):
    pass


if __name__ == '__main__':
    args = {}
    last = None

    for arg in sys.argv[1:]:
        if last == '-l':
            args['mvsjq.log'] = arg
            last = None
        elif last == '-s':
            args['mvsjq.socket'] = arg
            last = None
        elif last == '-waittime':
            args['mvsjq.waittime'] = int(arg)
            last = None
        elif last == '-waittime':
            args['mvsjq.waittime'] = int(arg)
            last = None
        elif last == '-cpus':
            args['mvsjq.cpus'] = int(arg)
            last = None
        elif last == '-mem':
            args['mvsjq.mem'] = arg
            last = None
        elif arg == '-daemon':
            args['mvsjq.daemon'] = True
        elif arg == '-no-daemon':
            args['mvsjq.daemon'] = False
        elif arg == '-autoshutdown':
            args['mvsjq.autoshutdown'] = True
        elif arg == '-no-autoshutdown':
            args['mvsjq.autoshutdown'] = False
        elif arg[0] == '-':
            last = arg

    start(**args)

